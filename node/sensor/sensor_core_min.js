SensorNode.prototype=new Node;SensorNode.prototype.constructor=SensorNode;SensorNode.prototype.parentNode=Node.prototype;SensorNode.authoringToolName="Sensor";SensorNode.authoringToolDescription="Students use a USB probe to collect data";function SensorNode(a,c){this.view=c;this.type=a;this.prevWorkNodeIds=[]}SensorNode.prototype.parseDataJSONObj=function(a){return SENSORSTATE.prototype.parseDataJSONObj(a)};SensorNode.prototype.translateStudentWork=function(a){return a};
SensorNode.prototype.onExit=function(){if(this.contentPanel){this.contentPanel.save&&this.contentPanel.save();try{if(this.contentPanel.onExit)try{this.contentPanel.onExit()}catch(a){}}catch(c){history.back()}}};
SensorNode.prototype.renderGradingView=function(a,c,b){var d=new SENSOR(this,this.view);b==null&&(b="");var e=c.id,c=c.getLatestWork();d.sensorState=c;d.generateGraphDataArray(c);d.parseGraphParams(this.content.getContentJSON().graphParams);var f=createElement(document,"div",{id:b+"sensorGraphDiv_"+e,style:"width:400px;height:200px;"}),g=createElement(document,"div",{id:b+"sensorGraphCheckBoxesDiv_"+e}),h=createElement(document,"div",{id:b+"sensorAnnotationsDiv_"+e}),b=createElement(document,"div",
{id:b+"sensorResponseDiv_"+e});$("#"+a).append(f);$("#"+a).append(g);$("#"+a).append(h);$("#"+a).append(b);d.plotData(f.id,g.id);$("#"+f.id).bind("mouseover",function(){$(".activeAnnotationToolTip").hide()});$("#"+f.id).bind("mouseleave",function(){$(".activeAnnotationToolTip").show()});a=c.getAnnotationsHtml();$("#"+h.id).html(a);a=c.response;a=this.view.replaceSlashNWithBR(a);$("#"+b.id).html(a)};SensorNode.prototype.getHTMLContentTemplate=function(){return createContent("node/sensor/sensor.html")};
NodeFactory.addNode("SensorNode",SensorNode);typeof eventManager!="undefined"&&eventManager.fire("scriptLoaded","vle/node/sensor/SensorNode.js");View.prototype.sensorDispatcher=function(a,c,b){a=="sensorUpdateSensorType"?b.SensorNode.updateSensorType():a=="sensorUpdateXUnits"?b.SensorNode.updateXUnits():a=="sensorUpdateXMin"?b.SensorNode.updateXMin():a=="sensorUpdateXMax"?b.SensorNode.updateXMax():a=="sensorUpdateYUnits"?b.SensorNode.updateYUnits():a=="sensorUpdateYMin"?b.SensorNode.updateYMin():a=="sensorUpdateYMax"?b.SensorNode.updateYMax():a=="sensorUpdateShowGraphOptions"?b.SensorNode.updateShowGraphOptions():a=="sensorUpdateEnableCreatePrediction"?
b.SensorNode.updateEnableCreatePrediction():a=="sensorUpdateEnableSensor"?b.SensorNode.updateEnableSensor():a=="sensorUpdateShowVelocity"?b.SensorNode.updateShowVelocity():a=="sensorUpdateShowAcceleration"?b.SensorNode.updateShowAcceleration():a=="sensorUpdateRequirePredictionBeforeEnter"?b.SensorNode.updateRequirePredictionBeforeEnter():a=="sensorUpdateGraphTitle"?b.SensorNode.updateGraphTitle():a=="sensorUpdateLockPredictionOnCollectionStart"?b.SensorNode.updateLockPredictionOnCollectionStart():
a=="sensorUpdateDataCollectionTimeLimit"&&b.SensorNode.updateDataCollectionTimeLimit()};
for(var events=["sensorUpdateSensorType","sensorUpdateXUnits","sensorUpdateXMin","sensorUpdateXMax","sensorUpdateYUnits","sensorUpdateYMin","sensorUpdateYMax","sensorUpdateShowGraphOptions","sensorUpdateEnableCreatePrediction","sensorUpdateEnableSensor","sensorUpdateShowVelocity","sensorUpdateShowAcceleration","sensorUpdateRequirePredictionBeforeEnter","sensorUpdateGraphTitle","sensorUpdateLockPredictionOnCollectionStart","sensorUpdateDataCollectionTimeLimit"],x=0;x<events.length;x++)componentloader.addEvent(events[x],
"sensorDispatcher");typeof eventManager!="undefined"&&eventManager.fire("scriptLoaded","vle/node/sensor/sensorEvents.js");
if(typeof eventManager != 'undefined'){eventManager.fire('scriptLoaded', 'vle/node/sensor/sensor_core_min.js');}
